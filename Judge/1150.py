'''
    1150. 카드 정리

    알파벳이 적힌 카드가 나열되어 있습니다. 재우는 모음 알파벳이 적힌 카드는 빼고 자음 알파벳이 적힌 카드만 남기고 싶습니다.
    카드는 한 번에 하나만 뺄 수 있으며 가장 앞에 있는 모음 알파벳 카드부터 빼야 합니다.
    그리고 빈 카드 자리가 생기면 뒤에 있는 카드를 하나씩 앞으로 옮겨서 빈자리를 채웁니다.
    나열된 알파벳 카드들이 문자열로 주어지고, 모음 알파벳을 전부 빼고 자음 알파벳만 남길 때까지 재우가 카드를 옮긴 횟수를 구하세요.

    예를 들어 문자열 AGEBD가 주어지면, 카드가 A, G, E, B, D 순으로 나열되어 있다는 뜻입니다.
    우선 A 카드를 빼고 G, E, B, D를 한 칸씩 앞으로 당깁니다. 그리고 남은 G, E, B, D 중에서 E를 빼고 B, D를 앞으로 당깁니다.
    남은 카드는 G, B, D이므로 더 이상 모음 카드는 남아있지 않고, 카드를 옮긴 횟수는 총 6번이 됩니다.

    # 입력
        첫 줄에 테스트 케이스의 개수 T(1<=T<=100)가 주어지고, 그 다음부터 카드를 나열한 문자열 S(1<=S.length()<=1,000)가
        각 입력마다 주어집니다. 문자열 S를 구성하고 있는 문자는 A부터 Z까지 알파벳 대문자로만 구성되어 있습니다.

    # 출력
        각 테스트 케이스에 대해서 모음 카드를 전부 제거할 때까지 카드를 옮긴 총 횟수를 출력하세요.
'''

vowel = ['A', 'E', 'I', 'O', 'U']
T = int(input())

for t in range(T):
    S = list(input())

    idx = 0
    cnt = 0
    while True:
        if idx == len(S):
            break
        if S[idx] in vowel:
            cnt += len(S[idx+1:])
            S.pop(idx)
            idx = 0
        else:
            idx += 1

    print(cnt)